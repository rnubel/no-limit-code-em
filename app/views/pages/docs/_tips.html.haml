.docs
  %h2 Tips
  .content
    %p Here are some tips from Enova to help you out:
    %ol
      %li Focus on getting your communication with the server working <b>first</b>. Players who wait until the final stage to get their actual requests working often never get them working, resulting in a lot of wasted effort. A bot who just checks and folds has a better chance of winning than a bot with a complicated strategy but never makes a valid action!
      %li Use a scripting language, like Ruby, Python, PHP, or Perl. Trying to use Java, C#, Objective-C, C++, etc., will result in a lot of wasted time dealing with implementation details and leave you less time to write poker logic.
      %li
        Make sure you understand how betting works. Here's an example, including a full set of actions for a round to make it clear:
        %ol.spaced
          %li Bob and Joe meet the ante of 20. The round begins in the 'deal' phase.
          %li 
            Bob wants to raise by 10. He can send either of these equivalent requests::
            .div{:style => "padding:8px"}
              <code>{ "action_name": "bet", "amount": 10 }</code>
            .div{:style => "padding:8px"}
              <code>{ "action_name": "raise", "amount": 10 }</code>
          %li
            Joe decides to call. He can send any of these equivalent requests:
            .div{:style => "padding:8px"}
              <code>{ "action_name": "call" }</code>
            .div{:style => "padding:8px"}
              <code>{ "action_name": "raise", "amount": 0 }</code>
            .div{:style => "padding:8px"}
              <code>{ "action_name": "bet", "amount": 0 }</code>
          %li 
            The betting phase moves to 'draw'. Bob decides to replace his ace of spaces and jack of clubs.
            .div{:style => "padding:8px"}
              <code>{ "action_name": "replace", "cards": "AS JC" }</code>
          %li 
            Joe decides to replace nothing. <strong>Make sure to send the cards parameter as an empty string if you don't want to replace anything!</strong>
            .div{:style => "padding:8px"}
              <code>{ "action_name": "replace", "cards": "" }</code>
          %li
            The betting phase moves to 'post_draw'. This is another betting round, and Bob starts off by checking. He can do this by any of these equivalent requests:
            .div{:style => "padding:8px"}
              <code>{ "action_name": "check" }</code>
            .div{:style => "padding:8px"}
              <code>{ "action_name": "bet", "amount": 0 }</code>
            .div{:style => "padding:8px"}
              <code>{ "action_name": "raise", "amount": 0 }</code>
          %li
            Joe decides to raise by 5.
            .div{:style => "padding:8px"}
              <code>{ "action_name": "raise", "amount": 5 }</code>
          %li
            Bob gives up and folds.
            .div{:style => "padding:8px"}
              <code>{ "action_name": "fold" }</code>
          %li
            The round ends, and Bob loses 30 chips to Joe.
